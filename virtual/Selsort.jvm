  public static void SelectionSort(int[]);
    descriptor: ([I)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=4, args_size=1
         0: iconst_0            // push 0 to the stack
         1: istore_1            // store 0 in index 1, the variable i 
         2: iload_1             // get i
         3: aload_0             // get content of the 0'th variable, the input array
         4: arraylength         // get length of arr
         5: if_icmpge     57    // jump to 57, iff i >= arr.length
         8: iload_1             // get i
         9: istore_2            // store i in, index 2, variable least
        10: iload_1             // get i
        11: iconst_1            // push 1 on the stack
        12: iadd                // add i to 1
        13: istore_3            // store result in variable index 3, j
        14: iload_3             // get j
        15: aload_0             // get arr
        16: arraylength         // get length of arr
        17: if_icmpge     37    // jump to 37, iff j >= arr.length
        20: aload_0             // get arr
        21: iload_3             // get j
        22: iaload              // get arr[j]
        23: aload_0             // get arr
        24: iload_2             // get least
        25: iaload              // get arr[least]
        26: if_icmpge     31    // jump to 31, iff (arr[j] >= arr[least]). The inverse of the code
        29: iload_3             // get j
        30: istore_2            // set least to j
        31: iinc          3, 1  // get j, add 1, store result to j,  j++
        34: goto          14    // jump 14
        37: aload_0             // get arr
        38: iload_1             // get i 
        39: iaload              // get arr[i]
        40: istore_3            // store arr[i] to j
        41: aload_0             // get arr
        42: iload_1             // get i
        43: aload_0             // get arr
        44: iload_2             // get least
        45: iaload              // get arr[least]
        46: iastore             // set arr[i] to arr[least]
        47: aload_0             // get arr
        48: iload_2             // get least 
        49: iload_3             // get j
        50: iastore             // set arr[least] to j
        51: iinc          1, 1  // get i, add 1, store result to i, i++
        54: goto          2     // jump 2
        57: return              // return
